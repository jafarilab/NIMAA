% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find-cluster.R
\name{findCluster}
\alias{findCluster}
\title{Find clusters in projected unipartite graphs}
\usage{
findCluster(
  inc_mat,
  dim = 1,
  method = "all",
  normalization = TRUE,
  rm_weak_edges = TRUE,
  rm_method = "delete",
  threshold = "median",
  set_remaining_to_1 = TRUE,
  extra_feature = NULL,
  comparison = TRUE
)
}
\arguments{
\item{inc_mat}{A matrix including valid values and NAs.}

\item{dim}{An integer, 1 or 2, indicating which one-partite projection should be used. Default is 1.}

\item{method}{A string array indicating the clustering methods. Defalut is "all" which means all clutering methods in this function will be used, other options are conbinations of "walktrap", "multi level", "infomap", "label propagation", "leading eigenvector", "spinglass", "fast greedy".}

\item{normalization}{A logical, whether to normalize the weights. Default is TRUE.}

\item{rm_weak_edges}{A logical, whether to remove the weak edges. Default is TRUE.}

\item{rm_method}{A string indicating the weak edges removing method, if 'rm_weak_edges' is False, then this argument will be ignored. Default is 'delete', which means delete weak edges from graph, other option is 'as_zero', set the weak edges' weights to 0.}

\item{threshold}{A string indicating the weak edges threshold selection method, if 'rm_weak_edges' is False, then this argument will be ignored. Default is 'median', other option is 'keep_connected', removing edges in ascending order of weight until the last one that keep the graph connected.}

\item{set_remaining_to_1}{A logical, whether to set the remaining edges' weight to 1. Default is TRUE.}

\item{extra_feature}{A dataframe has only one column indicating the membership of each nodes (rownames).}

\item{comparison}{A logical, whether to compare different clustering methods' result. Default is TRUE.}
}
\value{
A list containing the clustering results.
}
\description{
This function looks for the clusters in the projected unipartite graphs of the bipartite graph (the incidence matrix) that was given to it.
}
\details{
This function performs optional preprocessing, such as normalization, on the input incidence matrix (bipartite graph). The matrix is then used to perform bipartite graph projection and optional preprocessing on one of the projected networks specified, such as removing edges with low weights (weak edges). Additionally, the user can specify the removal method, threshold value, or binarization of the weights. For the graphs obtained after processing, this function implements some clustering methods in \href{https://igraph.org/r/}{igraph} such as "walktrap" and "infomap", to detect the communities within the network. Furthermore, if external features (prior knowledge) are provided, the function compares the clustering results obtained with the external features in terms of similarity as an external validation of clustering. Otherwise, several internal validation criteria such as modularity and coverage are only represented to compare the clustering results.
}
\examples{
# generate a incidence matrix
data <- matrix(c(1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1), nrow = 3)
colnames(data) <- letters[1:5]
rownames(data) <- LETTERS[1:3]

# run findCluster() to do clustering
cls <- findCluster(
  data,
  dim = 1,
  method = "all",
  normalization = FALSE,
  rm_weak_edges = TRUE,
  comparison = FALSE
)
}
